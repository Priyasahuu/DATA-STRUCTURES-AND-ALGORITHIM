class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
      int dx[]={0 , 0 , 1 , -1};
      int dy[]= { 1 , -1 , 0 , 0};
      queue<pair<int , int>> q;
      int n = grid.size();
      int m = grid[0].size();
      int tot=0;
      for( int i = 0 ; i < n ; i ++){
        for(  int j = 0 ; j < m ; j ++){
            if( grid[i][j] != 0)tot++;
            if( grid[i][j]==2)q.push({ i , j});

        }
      }  
      int days=0;
      int cnt=0;
      while(!q.empty()){
        int k = q.size();
        cnt +=k;
        while( k--){
            pair<int , int> p= q.front();
            q.pop();
            int row= p.first;
            int col = p.second;
             for( int i = 0 ; i <4 ; i ++){
                int rx= row+ dx[i];
                int cx = col + dy[i];
               if (rx >= 0 && rx < n && cx >= 0 && cx < m && grid[rx][cx] == 1) {
                        grid[rx][cx] = 2;      
                        q.push({rx, cx});     
                               
                    }
             }
        }
        if(!q.empty())days+=1;
      }
      return tot == cnt ? days: -1;
    }
};
