/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
public:
 set<int> st;
    void f( TreeNode* root){
        if( root==NULL)return;
    if( root->val >= 0 ){
           st.insert( root->val);
            if( root->left){
                 root->left->val= (2* root->val)+1;
            st.insert( root->left->val);
            }
            if( root->right){
                 root->right->val = ( 2* root->val)+2;
            st.insert( root->right ->val);}

        }
        else  {
            root->val =0;
            st.insert( root->val);
            if( root->left){
                 root->left->val= (2* root->val)+1;
            st.insert( root->left->val);
            }
            if( root->right){
                 root->right->val = ( 2* root->val)+2;
            st.insert( root->right ->val);}
 
        }
        f( root->left);
        f( root->right);
    }
    FindElements(TreeNode* root) {
      f( root); 

    }
    
    bool find(int target) {
        if( st.find( target) != st.end()) return true;
        return false;
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
