/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   TreeNode* f( vector<int>& inorder, int instart , int inend ,  vector<int>& postorder, int prestart , int prend , unordered_map<int, int>&mpp){
     
            if( instart > inend || prestart > prend)return NULL;
            TreeNode* root = new TreeNode( postorder[prend]);
            int inroot = mpp[root->val];
            int numleft = inroot - instart;
            root->left=f( inorder , instart , inroot-1 , postorder , prestart , prestart +numleft-1 , mpp);
            root->right =f(inorder , inroot+1 , inend ,postorder, prestart +numleft , prend -1, mpp);
            return root;
   }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
     int n = inorder.size();
     int  m=  postorder.size();
     unordered_map<int , int> mpp;
     for( int i = 0 ; i  < n ; i  ++){
        mpp[inorder[i]]=i;

     }
     return f( inorder , 0  , n-1 , postorder , 0 , m -1 , mpp);
    }
};
