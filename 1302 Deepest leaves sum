/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        if( root==NULL)return 0;
    queue<TreeNode*> q;
    q.push( root);  
    vector<vector<int>> ans;
    while(!q.empty()){
        int n = q.size();
        vector<int> temp;
        for( int i = 0 ; i < n ; i ++){
            TreeNode* node= q.front();
            q.pop();

             temp.push_back(node->val);
             if( node->left)q.push( node->left);
             if( node->right)q.push( node->right);
        }
       ans.push_back( temp);  

    } 
    int sum =0;
    int n = ans.size();
     for( int i  = 0 ; i < ans[n-1].size() ; i ++) {
       sum += ans[n-1][i];
     }
     return sum;
    }
};
