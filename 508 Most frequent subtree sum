/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int f( TreeNode* root  , unordered_map<int , int>& mpp){
    if(root ==NULL)return 0 ;
    int sum =0;
    sum += root->val;
    if( root->right) {
        sum += f(root->right,mpp);
        }
    if( root-> left )sum+=f(root->left , mpp);
    
    mpp[sum] +=1;
    return sum;

}
    vector<int> findFrequentTreeSum(TreeNode* root) {
        
        vector<int> ans;
        if( root == NULL)return ans;
        unordered_map<int , int> mpp;
        f( root , mpp);
        int h =0;
       for( auto it: mpp){
      h = max( h , it.second);
       }
       for( auto it : mpp){
        if( it.second== h)ans.push_back(  it.first);
       }
       return ans;
    }
};
