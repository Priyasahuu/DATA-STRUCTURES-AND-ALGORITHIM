/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* f( vector<int>& preorder , int prestart , int prend , vector<int>& inorder , int instart , int inend , unordered_map<int , int>& mpp){
    if( instart > inend || prestart > prend){
        return NULL;
    }
    TreeNode* root = new TreeNode(preorder[prestart]);
    int inroot= mpp[root->val];
    int numleft= inroot-instart;
    root->left= f( preorder , prestart +1 , prestart +numleft ,inorder ,  instart , inroot, mpp);
    root->right =f( preorder , prestart +numleft+1 , prend , inorder , inroot +1 , inend , mpp);
    return root;
}
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int , int> mpp;
        int n =inorder.size();
        int m = preorder.size();
        for( int i = 0 ; i  <n  ; i  ++){
            mpp[inorder[i]]= i;
        }
        return f( preorder , 0 , m-1 , inorder , 0 , n-1 , mpp);
    }
};
