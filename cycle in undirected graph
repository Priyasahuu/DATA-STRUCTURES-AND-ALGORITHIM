class Solution {
  public:
       bool f(vector<vector<int>>&adj , queue<pair<int, int>>&q , int src , vector<int>&vis){
           vis[src]=1;
           q.push({ src , -1});
           while(!q.empty()){
               int node= q.front().first;
               int parent = q.front().second;
               q.pop();
               for( auto it: adj[node]){
                   if(!vis[it]){
                       q.push({ it , node});
                       vis[it]=1;
                   }
                   else if( parent !=it ){
                       return true;
                   }
                   f( adj , q , it , vis);
               }
           }
           return false;
       }
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here 
        int n = edges.size();
        vector<vector<int>> adj(V);
       
        int m = edges[0].size();
        for( const auto& edge: edges){
             int u= edge[0];
             int v= edge[1];
             adj[u].push_back(v);
             adj[v].push_back(u);
             
        }
         vector<int> vis( V , 0);
         
         
         queue<pair<int , int>>q;
         for( int i = 0 ; i <V; i  ++){
             if( !vis[i] && f( adj , q , i , vis))return true;
         }
         return false;
         
    }
};
